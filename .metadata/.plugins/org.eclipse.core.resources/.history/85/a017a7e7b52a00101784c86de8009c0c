package org.projekat1.resource;

import java.util.Set;

import jakarta.inject.Inject;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.projekat1.exception.EventException;
import org.projekat1.model.Event;
import org.projekat1.model.Performer;
import org.projekat1.repository.EventRepository;

@Path("/events")
public class EventResource {

    @Inject
    private EventRepository eventRepository;

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Path("/addEvent")
    public Response createEvent(Event event) {
        try {
            // Provera da li su performeri povezani sa događajem
            if (event.getPerformers() != null && !event.getPerformers().isEmpty()) {
                for (Performer performer : event.getPerformers()) {
                    // Povezivanje performera sa događajem
                    performer.getEvents().add(event);
                }
            }

            // Kreiranje događaja u bazi
            Event createdEvent = eventRepository.createEvent(event);
            return Response.ok().entity(createdEvent).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("Došlo je do greške prilikom dodavanja događaja.").build();
        }
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/getAllEvents")
    public Response getAllEvents() {
        try {
            Set<Event> events = eventRepository.getAllEvents();  
            return Response.ok().entity(events).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("Došlo je do greške prilikom dobijanja svih događaja.").build();
        }
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/getEventsByName")
    public Response getEventsByName(@QueryParam("name") String name) {
        try {
            Set<Event> events = eventRepository.getEventsByName(name); 
            if (events.isEmpty()) {
                return Response.status(Response.Status.NOT_FOUND)
                        .entity("Nema događaja sa tim imenom.").build();
            }
            return Response.ok().entity(events).build();
        } catch (EventException e) {
            return Response.status(Response.Status.BAD_REQUEST)
                    .entity(e.getMessage()).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("Došlo je do greške.").build();
        }
    }
}
