package org.projekat1.resource;

import java.util.Set;

import jakarta.inject.Inject;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.projekat1.exception.EventException;
import org.projekat1.model.Performer;
import org.projekat1.repository.PerformerRepository;

@Path("/performers")
public class PerformerResource {

    @Inject
    private PerformerRepository performerRepository;

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Path("/addPerformer")
    public Response createPerformer(Performer performer) {
        try {
            Performer createdPerformer = performerRepository.createPerformer(performer);
            return Response.ok().entity(createdPerformer).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("Došlo je do greške prilikom dodavanja izvođača.").build();
        }
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/getAllPerformers")
    public Response getAllPerformers() {
        try {
            Set<Performer> performers = performerRepository.getAllPerformers();
            return Response.ok().entity(performers).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("Došlo je do greške prilikom dobijanja svih izvođača.").build();
        }
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/getPerformersByName")
    public Response getPerformersByName(@QueryParam("name") String name) {
        try {
            Set<Performer> performers = performerRepository.getPerformersByName(name);
            if (performers.isEmpty()) {
                return Response.status(Response.Status.NOT_FOUND)
                        .entity("Nema izvođača sa tim imenom.").build();
            }
            return Response.ok().entity(performers).build();
        } catch (EventException e) {
            return Response.status(Response.Status.BAD_REQUEST)
                    .entity(e.getMessage()).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("Došlo je do greške.").build();
        }
    }
}
